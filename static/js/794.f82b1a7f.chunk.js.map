{"version":3,"file":"static/js/794.f82b1a7f.chunk.js","mappings":"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","sources":["common/DeleteButton.jsx","common/EditButton.jsx","common/SaveButton.jsx","components/EditContactInputs.jsx","components/SaveConfirmationModal.jsx","components/Contact.jsx","redux/contacts/selectors.js","components/ContactList.jsx","common/AddContactButton.jsx","components/ContactForm.jsx","components/ContactEditor.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../redux/contacts/operations';\nimport { Button } from '@chakra-ui/react';\n\nconst DeleteButton = ({ id }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Button colorScheme=\"red\" onClick={handleDelete}>\n      Delete\n    </Button>\n  );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport { Button } from '@chakra-ui/react';\n\nconst EditButton = ({ onClick }) => {\n  return (\n    <Button colorScheme=\"blue\" onClick={onClick}>\n      Edit\n    </Button>\n  );\n};\n\nexport default EditButton;\n","import React from 'react';\nimport { Button } from '@chakra-ui/react';\n\nconst SaveButton = ({ onClick }) => {\n  return (\n    <Button colorScheme=\"teal\" onClick={onClick}>\n      Save\n    </Button>\n  );\n};\n\nexport default SaveButton;\n","import React from 'react';\nimport { Input } from '@chakra-ui/react';\n\nconst ContactInputs = ({\n  editedName,\n  editedNumber,\n  onNameChange,\n  onNumberChange,\n}) => {\n  return (\n    <>\n      <Input value={editedName} onChange={onNameChange} />\n      <Input value={editedNumber} onChange={onNumberChange} />\n    </>\n  );\n};\n\nexport default ContactInputs;\n","import React from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from '@chakra-ui/react';\n\nconst SaveConfirmationModal = ({ isOpen, onClose, onConfirm }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Confirm Save</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>Are you sure you want to save the edited contact?</ModalBody>\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} onClick={onConfirm}>\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default SaveConfirmationModal;\n","import React, { useState } from 'react';\nimport DeleteButton from 'common/DeleteButton';\nimport EditButton from 'common/EditButton';\nimport SaveButton from 'common/SaveButton';\nimport EditContactInputs from './EditContactInputs';\nimport SaveConfirmationModal from './SaveConfirmationModal';\nimport { Box, Text } from '@chakra-ui/react';\n\nexport const Contact = ({ id, name, number, onSave }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedName, setEditedName] = useState(name);\n  const [editedNumber, setEditedNumber] = useState(number);\n  const [isSaveModalOpen, setSaveModalOpen] = useState(false);\n\n  const handleEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleSaveClick = () => {\n    setSaveModalOpen(true);\n  };\n\n  const handleConfirmSave = async () => {\n    try {\n      if (typeof onSave === 'function') {\n        // Verifica daca onSave e o functie\n        // Trimite datele către server\n        await onSave({\n          id,\n          name: editedName,\n          number: editedNumber,\n        });\n      }\n      // După salvare, închide fereastra modală și revine la modul de vizualizare\n      setIsEditing(false);\n      setSaveModalOpen(false);\n    } catch (error) {\n      console.error('Saving error:', error);\n    }\n  };\n\n  return (\n    <Box\n      borderWidth=\"1px\"\n      borderRadius=\"md\"\n      p=\"2\"\n      mt=\"2\"\n      mb=\"4\"\n      width=\"895px\"\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      {isEditing ? (\n        <>\n          <EditContactInputs\n            editedName={editedName}\n            editedNumber={editedNumber}\n            onNameChange={e => setEditedName(e.target.value)}\n            onNumberChange={e => setEditedNumber(e.target.value)}\n          />\n          <SaveButton onClick={handleSaveClick} />\n          <SaveConfirmationModal\n            isOpen={isSaveModalOpen}\n            onClose={() => setSaveModalOpen(false)}\n            onConfirm={handleConfirmSave}\n          />\n        </>\n      ) : (\n        <>\n          <Text fontSize=\"md\" flex=\"1\">{`${name} ${number}`}</Text>\n          <EditButton onClick={handleEditClick} />\n          <DeleteButton id={id} />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Contact;\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Contact } from './Contact';\nimport { patchContact } from '../redux/contacts/operations';\nimport { selectAllContacts } from '../redux/contacts/selectors';\nimport { Box, UnorderedList, ListItem } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleSaveContact = async ({ id, name, number }) => {\n    try {\n      await dispatch(patchContact({ id, name, number }));\n    } catch (error) {\n      console.error('Saving contact error:', error);\n    }\n  };\n\n  return (\n    <Box>\n      <UnorderedList listStyleType=\"none\" p=\"0\">\n        {contacts.map(({ id, name, number }) => (\n          <ListItem key={id} mb=\"4\">\n            <Contact\n              id={id}\n              name={name}\n              number={number}\n              onSave={handleSaveContact}\n            />\n          </ListItem>\n        ))}\n      </UnorderedList>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../redux/contacts/operations';\nimport { Button } from '@chakra-ui/react';\n\nconst AddContactButton = ({ name, number, onReset }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name !== '' && number !== '') {\n      dispatch(addContact({ name, number }));\n      onReset();\n    } else {\n      alert('Name and phone number are required. Enter some text!');\n    }\n  };\n\n  return (\n    <Button type=\"submit\" colorScheme=\"teal\" onClick={handleSubmit}>\n      Add contact\n    </Button>\n  );\n};\n\nexport default AddContactButton;\n","import React from 'react';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst ContactForm = ({ name, setName, number, setNumber }) => {\n  return (\n    <>\n      <FormControl mb=\"4\">\n        <FormLabel>Name:</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl mb=\"4\">\n        <FormLabel>Phone Number:</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"phoneNumber\"\n          value={number}\n          onChange={e => setNumber(e.target.value)}\n        />\n      </FormControl>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import React, { useState } from 'react';\nimport AddContactButton from '../common/AddContactButton';\nimport ContactForm from 'components/ContactForm';\nimport { Box } from '@chakra-ui/react';\n\nexport const ContactEditor = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box\n      as=\"form\"\n      p=\"4\"\n      mt=\"4\"\n      borderWidth=\"1px\"\n      borderRadius=\"md\"\n      onSubmit={handleReset}\n    >\n      <ContactForm\n        name={name}\n        setName={setName}\n        number={number}\n        setNumber={setNumber}\n      />\n      <AddContactButton name={name} number={number} onReset={handleReset} />\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList';\nimport { ContactEditor } from 'components/ContactEditor';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectLoading } from '../redux/contacts/selectors';\nimport { Box, Text, Spinner } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactEditor />\n      {isLoading ? (\n        <Box textAlign=\"center\" mt=\"4\">\n          <Spinner size=\"lg\" color=\"teal.500\" />\n          <Text mt=\"2\">Request in progress...</Text>\n        </Box>\n      ) : (\n        <ContactList />\n      )}\n    </>\n  );\n}\n"],"names":["_ref","id","dispatch","useDispatch","_jsx","Button","colorScheme","onClick","deleteContact","children","editedName","editedNumber","onNameChange","onNumberChange","_jsxs","_Fragment","Input","value","onChange","isOpen","onClose","onConfirm","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","mr","Contact","name","number","onSave","_useState","useState","_useState2","_slicedToArray","isEditing","setIsEditing","_useState3","_useState4","setEditedName","_useState5","_useState6","setEditedNumber","_useState7","_useState8","isSaveModalOpen","setSaveModalOpen","handleConfirmSave","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","t0","console","error","stop","apply","arguments","Box","borderWidth","borderRadius","p","mt","mb","width","display","justifyContent","alignItems","EditContactInputs","e","target","SaveButton","SaveConfirmationModal","Text","fontSize","flex","concat","EditButton","DeleteButton","selectLoading","state","contacts","loading","selectAllContacts","items","ContactList","useSelector","handleSaveContact","patchContact","_x","UnorderedList","listStyleType","map","_ref3","ListItem","onReset","type","preventDefault","addContact","alert","setName","setNumber","FormControl","FormLabel","ContactEditor","handleReset","as","onSubmit","ContactForm","AddContactButton","Contacts","isLoading","useEffect","fetchContacts","Helmet","textAlign","Spinner","size","color"],"sourceRoot":""}